/*
 * student ID:5140379064
 * student name:陈俊
 */

#include "cachelab.h"
#include<stdlib.h>
#include<stdio.h>
#include<getopt.h>
#include <unistd.h>

struct line                  //use list to achieve LRU
{
   int valid;
   unsigned long long tag;
   char* block;
   struct line* prev; 
   struct line* next;
};

typedef struct line Line;

typedef struct{
  Line* lines;
  Line* end;
} Set;

typedef struct{
   Set* sets;
   int s;
   int E;
   int b;
} Cache;


int count_hit = 0;
int count_miss = 0;
int count_eviction = 0;
int flag = 0;                       //to mark the mode -v

Cache* init_cache(int s, int E, int b);
void parse_addr(Cache* cache, unsigned long long addr);
int find_hit(Set* set, unsigned long long tag);
int find_invalid(Set* set, unsigned long long tag);
void evict(Set* set,unsigned long long tag);

Cache* init_cache(int s, int E, int b)                          //init cache
{
   int i,j;
   Cache* cache;
   int S = 1 << s;
   int B = 1 << b;
   cache = (Cache*) malloc(sizeof(Cache));
   cache-> s = s;
   cache-> E = E;
   cache-> b = b;
   cache->sets = (Set*) malloc(sizeof(Set)* S);
   for(i = 0; i < S; i++)
   {
     Line* tmp = NULL;
     (cache->sets)[i].lines = (Line*)malloc(sizeof(Line)*E);
     (cache->sets)[i].end = &((cache->sets)[i].lines[E - 1]);
     for(j = 0 ;j < E; j++)
     {
        Line* cache_line = &(((cache->sets)[i].lines)[j]);
        cache_line->valid = 0;
        cache_line->tag = 0;
        cache_line->block = (char*)malloc(sizeof(char*)*B);
        cache_line->prev = tmp;
        tmp = cache_line;
        if(j != (E-1))
          cache_line->next = &(((cache->sets)[i].lines)[j + 1]);
        else
          cache_line->next = NULL;
     }
   }
   return cache;
}


void parse(Cache* cache, unsigned long long addr)             
{
  int b = cache->b;
  int s = cache->s;
  int t = 64 - b - s;
  unsigned long long tag = addr >> (b+s);
  unsigned long long index = (addr << t) >> (64-s);
  Set* set = &(cache -> sets[index]);
  int is_hit = find_hit(set, tag);
  if(is_hit && flag == 1)
     printf(" hit");
  else if(!is_hit)
  {
     if(flag == 1)
        printf(" miss");
     int invalid = find_invalid(set,tag);
     if(!invalid)
        evict(set,tag);
  }
}

int find_hit(Set* set, unsigned long long tag)
{
   Line* p = set->lines;
   while(p != NULL)
   {
      if(p->valid == 1 && p->tag == tag)
      {
         count_hit++;
         if(p == set->lines)
             return 1;
         if(p == set->end)
         {
            p->prev->next = NULL;
            set-> end = p->prev;
            p->prev = NULL;
            p->next = set->lines;
            set->lines->prev = p;
            set->lines = p;
            return 1;
         }          
         p->prev->next = p->next;
         p->next->prev = p->prev;
         p->prev = NULL;
         p->next = set->lines;
         set->lines->prev = p;
         set->lines = p;
         return 1;   
      }
   p = p->next;  
   }
   return 0;
}

int find_invalid(Set* set, unsigned long long tag)
{
  Line* end = set->end;
  count_miss++;
  if(end->valid == 0)
  {
     end->valid = 1;
     end->tag = tag;
     if(end->prev == NULL)
         return 1;
     else
     {
       end->prev->next = NULL;
       set->end = end->prev;
       end->prev = NULL;
       end->next = set->lines;
       set->lines->prev = end;
       set->lines = end;
       return 1;    
     }
  }
  else
    return 0;
}
   
void evict(Set* set,unsigned long long tag)
{
  Line* end = set->end;
  count_eviction++;
  end->tag = tag;
  if(flag == 1)
     printf(" eviction");
  if(end->prev != NULL)
  {
     end->prev->next = NULL;
     set->end = end->prev;
     end->prev = NULL;
     end->next = set->lines;
     set->lines->prev = end;
     set->lines = end; 
  }
}


void print_message(char* argv[])         //help menu
{
  printf("Usage: %s [-hv] -s <num> -E <num> -b <num> -t <file>\n", argv[0]);
  printf("Options:\n");
  printf("  -h         Print this help message.\n");
  printf("  -v         Optional verbose flag.\n");
  printf("  -s <num>   Number of set index bits.\n");
  printf("  -E <num>   Number of lines per set.\n");
  printf("  -b <num>   Number of block offset bits.\n");
  printf("  -t <file>  Trace file.\n\n");
  printf("Examples:\n");
  printf("  linux>  %s -s 4 -E 1 -b 4 -t traces/yi.trace\n", argv[0]);
  printf("  linux>  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\n", argv[0]);
  exit(0);
}

int main(int argc,char*argv[])
{
    int ch;
    int s,E,b;
    char op;
    unsigned long long addr;
    int size;
    char* trace;
    Cache* cache;
    FILE* file;
    while ((ch = getopt(argc,argv,"s:E:b:t:hv"))!= -1){            //use function getopt 
       switch (ch){
         case 'h':
           print_message(argv);
           exit(0);
         case 's':
           s = atoi(optarg);
           break;
         case 'E':
           E = atoi(optarg);
           break;
         case 'b':
           b = atoi(optarg);
           break;
         case 't':
           trace = optarg;
           break;
         case 'v':
           flag = 1;
           break;
         default:
           print_message(argv);
           exit(0);
       }
    }
    if (s == 0 || E == 0 || b == 0 || trace == NULL){
       printf("%s: Missing required command line argument\n", argv[0]);
       print_message(argv);
       exit(0);
    }
    cache = init_cache(s,E,b);
    file = fopen(trace,"r");

    if(file != NULL)
    {
       while(fscanf(file," %c %llx,%d",&op,&addr,&size) == 3)
       { 
         if(flag == 1 &&(op == 'L' || op == 'S' || op == 'M'))
              printf("%c %llx,%d",op,addr,size);
         switch(op)
         {
            case 'L':          
              parse(cache,addr);
              if(flag == 1)
                 printf("\n");
              break;
            case 'S':          
              parse(cache,addr);
              if(flag == 1)
                 printf("\n");  
              break;
            case 'M':
              parse(cache,addr);
              parse(cache,addr);
              if(flag == 1)
                 printf("\n");
              break;
            default:
              break;
         }
       }
       fclose(file);
    }
    else 
    {
      printf("%s: No such file or directory\n",trace);
      exit(0);
    }
    printSummary(count_hit, count_miss, count_eviction);
    return 0;
}
