#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-8, %edx		# len <= 0?
	jl Jpos		# if so, goto Done:

Loop:	mrmovl (%ebx), %esi	# read val from src...
        mrmovl 4(%ebx),%edi       	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle pos1		# if so, goto Npos:
	iaddl $1, %eax		# count++
pos1:   andl %edi,%edi
        rmmovl %esi, (%ecx)
        mrmovl 8(%ebx),%esi         
        jle pos2
        iaddl $1, %eax
pos2:   andl %esi, %esi
        rmmovl %edi,4(%ecx)
        mrmovl 12(%ebx),%edi      
        jle pos3
        iaddl $1, %eax
pos3:   andl %edi, %edi
        rmmovl %esi, 8(%ecx)
        mrmovl 16(%ebx),%esi
        jle pos4       
        iaddl $1, %eax
pos4:   andl %esi,%esi
        rmmovl %edi, 12(%ecx)
        mrmovl 20(%ebx), %edi
        jle pos5
        iaddl $1, %eax
pos5:   andl %edi,%edi
        rmmovl %esi, 16(%ecx)
        mrmovl 24(%ebx), %esi
        jle pos6
        iaddl $1, %eax
pos6:   andl %esi, %esi
        rmmovl %edi, 20(%ecx)
        mrmovl 28(%ebx),%edi
        jle pos7
        iaddl $1, %eax
pos7:   andl %edi, %edi
        rmmovl %esi,24(%ecx)
        rmmovl %edi,28(%ecx)
        jle Npos
        iaddl $1, %eax
Npos:	iaddl $32, %ebx		# src++
	iaddl $32, %ecx		# dst++
	iaddl $-8, %edx		# len > 0?
	jge Loop			# if so, goto Loop:
Jpos:   
        addl %edx, %edx
        addl %edx, %edx
        mrmovl Tend(%edx),%edx
        pushl %edx
        ret

.align 4
Table: .long Done2
       .long Jmp7
       .long Jmp6
       .long Jmp5
       .long Jmp4
       .long Jmp3
       .long Jmp2
       .long Jmp1
Tend: 


Jmp1:   mrmovl 24(%ebx),%esi
        mrmovl 20(%ebx),%edi
        andl %esi,%esi
        jle Body1
        iaddl $1,%eax
        jmp Body1
Jmp2:   mrmovl 20(%ebx),%edi
        mrmovl 16(%ebx),%esi
        andl %edi,%edi
        jle Body2
        iaddl $1,%eax
        jmp Body2
Jmp3:   mrmovl 16(%ebx),%esi
        mrmovl 12(%ebx),%edi
        andl %esi,%esi
        jle Body3
        iaddl $1,%eax
        jmp Body3
Jmp4:   mrmovl 12(%ebx),%edi
        mrmovl 8(%ebx),%esi
        andl %edi,%edi
        jle Body4
        iaddl $1,%eax
        jmp Body4
Jmp5:   mrmovl 8(%ebx),%esi
        mrmovl 4(%ebx),%edi
        andl %esi,%esi
        jle Body5
        iaddl $1,%eax
        jmp Body5
Jmp6:   mrmovl 4(%ebx),%edi
        mrmovl (%ebx),%esi
        andl %edi,%edi
        jle Body6
        iaddl $1,%eax
        jmp Body6
Jmp7:   mrmovl (%ebx),%esi
        rmmovl %esi,(%ecx)
        andl %esi,%esi
        jle Done2
        iaddl $1,%eax
        jmp Done2
        


Body1:  andl %edi,%edi
        rmmovl %esi, 24(%ecx)	
        mrmovl 16(%ebx), %esi	
	jle Body2
        iaddl $1,%eax  
Body2:  andl %esi,%esi	
	rmmovl %edi, 20(%ecx)
        mrmovl 12(%ebx),%edi		
	jle Body3
        iaddl $1,%eax
Body3:  andl %edi,%edi 
        rmmovl %esi, 16(%ecx)
        mrmovl 8(%ebx), %esi	
	jle Body4	
        iaddl $1,%eax
Body4:  andl %esi,%esi
        rmmovl %edi, 12(%ecx)
        mrmovl 4(%ebx), %edi				
	jle Body5
        iaddl $1,%eax
Body5:  andl %edi,%edi
        rmmovl %esi, 8(%ecx)
        mrmovl (%ebx),%esi
        jle Body6
        iaddl $1,%eax
Body6:  andl %esi,%esi
        rmmovl %edi, 4(%ecx)
        rmmovl %esi, (%ecx)
        jle Done2
        iaddl $1,%eax
 

Done2:
    popl %edi
    popl %ebx
    popl %esi
    leave
    ret


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
